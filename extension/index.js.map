{"mappings":"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","sources":["src/extension/index.extension.ts","src/extension/utils/index.ts","node_modules/@parcel/transformer-js/src/esmodule-helpers.js","src/extension/utils/replicants.ts","src/extension/tiltifyHandlers.ts","src/extension/utils/currency.ts","src/extension/messages.ts","src/extension/utils/mod.ts"],"sourcesContent":["import type NodeCG from '@nodecg/types';\nimport type { Donation, Donations, Configschema, Alldonations, Total, Polls, Schedule, Targets, Rewards, Milestones, Donors, Campaign } from '../types/schemas';\nimport { EventEmitter } from 'node:events';\nimport { storeNodeCG, isEmpty } from './utils';\n\nexport let WEBHOOK_MODE = true;\n\nmodule.exports = function (nodecg: NodeCG.ServerAPI<Configschema>) {\n\tif (isEmpty(nodecg.bundleConfig.tiltify_webhook_secret) || isEmpty(nodecg.bundleConfig.tiltify_webhook_id)) {\n\t\tWEBHOOK_MODE = false\n\t\tnodecg.log.info(\"Running without webhooks!! Please set webhook secret, and webhook id in cfg/nodecg-tiltify.json [See README]\");\n\t\treturn;\n\t}\n\n\tif (isEmpty(nodecg.bundleConfig.tiltify_client_id)) {\n\t\tnodecg.log.info(\"Please set tiltify_client_id in cfg/nodecg-tiltify.json\");\n\t\treturn;\n\t}\n\n\tif (isEmpty(nodecg.bundleConfig.tiltify_client_secret)) {\n\t\tnodecg.log.info(\"Please set tiltify_client_secret in cfg/nodecg-tiltify.json\");\n\t\treturn;\n\t}\n\n\tif (isEmpty(nodecg.bundleConfig.tiltify_campaign_id)) {\n\t\tnodecg.log.info(\n\t\t\t\"Please set tiltify_campaign_id in cfg/nodecg-tiltify.json\"\n\t\t);\n\t\treturn;\n\t}\n\n\t// Store nodecg for retrieval elsewhere\n\tstoreNodeCG(nodecg);\n\t// Then load replicants\n\trequire(\"./utils/replicants\");\n\n\t// Then load everything else\n\trequire(\"./tiltifyHandlers\");\n\trequire(\"./messages\");\n\trequire(\"./utils/currency\");\n};\n","import type NodeCG from '@nodecg/types';\nimport type { Configschema } from '../../types/schemas';\n\nlet nodecg: NodeCG.ServerAPI<Configschema>;\n\nexport function storeNodeCG(ncg: NodeCG.ServerAPI<Configschema>) {\n    nodecg = ncg;\n}\n\nexport function getNodeCG(): NodeCG.ServerAPI<Configschema> {\n    return nodecg;\n}\n\nexport function isEmpty(string: string | undefined | null) {\n    return string === undefined || string === null || string === \"\"\n}","exports.interopDefault = function (a) {\n  return a && a.__esModule ? a : {default: a};\n};\n\nexports.defineInteropFlag = function (a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\n\nexports.exportAll = function (source, dest) {\n  Object.keys(source).forEach(function (key) {\n    if (key === 'default' || key === '__esModule' || dest.hasOwnProperty(key)) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function () {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n};\n\nexports.export = function (dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n","import type NodeCG from '@nodecg/types';\nimport type { Donation, Donations, Configschema, Alldonations, Total, Polls, Schedule, Targets, Rewards, Milestones, Donors, Campaign } from '../../types/schemas';\nimport { getNodeCG } from \".\";\n\n\nconst nodecg = getNodeCG();\nexport const donations = nodecg.Replicant(\"donations\") as unknown as NodeCG.ServerReplicantWithSchemaDefault<Donations>;\nexport const allDonations = nodecg.Replicant(\"alldonations\") as unknown as NodeCG.ServerReplicantWithSchemaDefault<Alldonations>;\nexport const campaignTotal = nodecg.Replicant(\"total\") as unknown as NodeCG.ServerReplicantWithSchemaDefault<Total>;\nexport const polls = nodecg.Replicant(\"polls\") as unknown as NodeCG.ServerReplicantWithSchemaDefault<Polls>;\nexport const schedule = nodecg.Replicant(\"schedule\") as unknown as NodeCG.ServerReplicantWithSchemaDefault<Schedule>;\nexport const targets = nodecg.Replicant(\"targets\") as unknown as NodeCG.ServerReplicantWithSchemaDefault<Targets>;\nexport const rewards = nodecg.Replicant(\"rewards\") as unknown as NodeCG.ServerReplicantWithSchemaDefault<Rewards>;\nexport const milestones = nodecg.Replicant(\"milestones\") as unknown as NodeCG.ServerReplicantWithSchemaDefault<Milestones>;\nexport const donors = nodecg.Replicant(\"donors\") as unknown as NodeCG.ServerReplicantWithSchemaDefault<Donors>;\n","import TiltifyClient from \"@ericthelemur/tiltify-api-client\";\nimport { NextFunction } from 'express';\nimport { Request, Response } from \"express-serve-static-core\";\nimport { createHmac } from \"node:crypto\";\nimport { EventEmitter } from 'node:stream';\n\nimport type { Alldonations, Campaign, Donation, Donations, Donors, Milestones, Polls, Rewards, Schedule, Targets } from '../types/schemas';\nimport { WEBHOOK_MODE } from './index.extension';\nimport { getNodeCG } from './utils';\nimport { convertValue } from './utils/currency';\nimport * as rep from \"./utils/replicants\";\n\n\nconst nodecg = getNodeCG();\nexport const tiltifyEmitter = new EventEmitter();\n\nvar client = new TiltifyClient(nodecg.bundleConfig.tiltify_client_id, nodecg.bundleConfig.tiltify_client_secret);\nconst app = nodecg.Router();\n\nfunction pushUniqueDonation(donation: Donation) {\n    var found = rep.donations.value.find(function (element: Donation) {\n        return element.id === donation.id;\n    });\n    if (found === undefined) {\n        donation.read = false;\n        donation.shown = false;\n        donation.modStatus = null;\n        convertValue(donation);\n        tiltifyEmitter.emit(\"new-donation\", donation);\n        rep.donations.value.push(donation);\n    }\n}\n\nfunction updateTotal(campaign: Campaign) {\n    // Less than check in case webhooks are sent out-of-order. Only update the total if it's higher!\n    if (Number(rep.campaignTotal.value.value) < Number(campaign.amount_raised.value) || rep.campaignTotal.value.currency != campaign.amount_raised.currency) {\n        rep.campaignTotal.value = campaign.amount_raised;\n    }\n}\n\n/**\n * Verifies that the payload delivered matches the signature provided, using sha256 algorithm and the webhook secret\n * Acts as middleware, use in route chain\n */\nfunction validateSignature(req: Request, res: Response, next: NextFunction) {\n    const signatureIn = req.get('X-Tiltify-Signature')\n    const timestamp = req.get('X-Tiltify-Timestamp')\n    const signedPayload = `${timestamp}.${JSON.stringify(req.body)}`\n    const hmac = createHmac('sha256', nodecg.bundleConfig.tiltify_webhook_secret as string);\n    hmac.update(signedPayload);\n    const signature = hmac.digest('base64');\n    if (signatureIn === signature) {\n        next()\n    } else {\n        // Close connection (200 code MUST be sent regardless)\n        res.sendStatus(200)\n    };\n}\n\napp.post('/nodecg-tiltify/webhook', validateSignature, (req: Request, res: Response) => {\n    // Verify this webhook is sending out stuff for the campaign we're working on\n    if (\n        req.body?.meta.event_type === \"public:direct:donation_updated\" // &&\n        // req.body.data.campaign_id === nodecg.bundleConfig.tiltify_campaign_id\n    ) {\n        // New donation\n        pushUniqueDonation(req.body.data)\n    } else if (\n        req.body.meta.event_type === \"public:direct:fact_updated\" // &&\n        // req.body.data.id === nodecg.bundleConfig.tiltify_campaign_id\n    ) {\n        // Updated amount raised\n        updateTotal(req.body.data)\n    }\n    // Send ack\n    res.sendStatus(200)\n})\n\nasync function askTiltifyForDonations() {\n    client.Campaigns.getRecentDonations(\n        nodecg.bundleConfig.tiltify_campaign_id,\n        function (donations: Donations) {\n            for (let i = 0; i < donations.length; i++) {\n                pushUniqueDonation(donations[i])\n            }\n        }\n    );\n}\n\nasync function askTiltifyForAllDonations() {\n    client.Campaigns.getDonations(\n        nodecg.bundleConfig.tiltify_campaign_id,\n        function (alldonations: Alldonations) {\n            if (\n                JSON.stringify(rep.allDonations.value) !== JSON.stringify(alldonations)\n            ) {\n                rep.allDonations.value = alldonations;\n            }\n        }\n    );\n}\n\nasync function askTiltifyForPolls() {\n    client.Campaigns.getPolls(\n        nodecg.bundleConfig.tiltify_campaign_id,\n        function (polls: Polls) {\n            if (JSON.stringify(rep.polls.value) !== JSON.stringify(polls)) {\n                rep.polls.value = polls;\n            }\n        }\n    );\n}\n\nasync function askTiltifyForSchedule() {\n    client.Campaigns.getSchedule(\n        nodecg.bundleConfig.tiltify_campaign_id,\n        function (schedule: Schedule) {\n            if (JSON.stringify(rep.schedule.value) !== JSON.stringify(schedule)) {\n                rep.schedule.value = schedule;\n            }\n        }\n    );\n}\n\nasync function askTiltifyForTargets() {\n    client.Campaigns.getTargets(\n        nodecg.bundleConfig.tiltify_campaign_id,\n        function (targets: Targets) {\n            if (\n                JSON.stringify(rep.targets.value) !== JSON.stringify(targets)\n            ) {\n                rep.targets.value = targets;\n            }\n        }\n    );\n}\n\nasync function askTiltifyForRewards() {\n    client.Campaigns.getRewards(\n        nodecg.bundleConfig.tiltify_campaign_id,\n        function (rewards: Rewards) {\n            if (JSON.stringify(rep.rewards.value) !== JSON.stringify(rewards)) {\n                rep.rewards.value = rewards;\n            }\n        }\n    );\n}\n\nasync function askTiltifyForMilestones() {\n    client.Campaigns.getMilestones(\n        nodecg.bundleConfig.tiltify_campaign_id,\n        function (milestones: Milestones) {\n            if (JSON.stringify(rep.milestones.value) !== JSON.stringify(milestones)) {\n                rep.milestones.value = milestones;\n            }\n        }\n    );\n}\n\nasync function askTiltifyForDonors() {\n    client.Campaigns.getDonors(\n        nodecg.bundleConfig.tiltify_campaign_id,\n        function (donors: Donors) {\n            if (JSON.stringify(rep.donors.value) !== JSON.stringify(donors)) {\n                rep.donors.value = donors;\n            }\n        }\n    );\n}\n\nasync function askTiltifyForTotal() {\n    client.Campaigns.get(nodecg.bundleConfig.tiltify_campaign_id, function (\n        campaign: Campaign\n    ) {\n        updateTotal(campaign)\n    });\n}\n\nfunction askTiltify() {\n    // Donations and total are handled by websocket normally, only ask if not using websockets\n    if (!WEBHOOK_MODE) {\n        askTiltifyForDonations();\n        askTiltifyForTotal();\n    }\n    askTiltifyForPolls();\n    askTiltifyForTargets();\n    askTiltifyForSchedule();\n    askTiltifyForRewards();\n    askTiltifyForMilestones();\n    askTiltifyForDonors();\n}\n\nclient.initialize().then(() => {\n    if (WEBHOOK_MODE) {\n        client.Webhook.activate(nodecg.bundleConfig.tiltify_webhook_id, () => {\n            nodecg.log.info('Webhooks staged!')\n        })\n        const events = { \"event_types\": [\"public:direct:fact_updated\", \"public:direct:donation_updated\"] }\n        client.Webhook.subscribe(nodecg.bundleConfig.tiltify_webhook_id, nodecg.bundleConfig.tiltify_campaign_id, events, () => {\n            nodecg.log.info('Webhooks activated!')\n        })\n    }\n\n    askTiltifyForTotal();\n    askTiltify();\n    askTiltifyForAllDonations();\n\n    setInterval(function () {\n        askTiltify();\n    }, WEBHOOK_MODE ? 10000 : 5000);\n\n    setInterval(function () {\n        askTiltifyForAllDonations();\n    }, 5 * 60000);\n})\n\nnodecg.mount(app);","import { getNodeCG } from \".\";\nimport type { Donation } from '../../types/schemas';\nimport { donations } from \"./replicants\";\n\nconst nodecg = getNodeCG();\n\ntype ConversionRates = {[code: string]: number};\n\nexport var conversionRates: ConversionRates = {\n    USD: 1.2461833299,\n    AUD: 1.9125802417,\n    BRL: 6.1138013225,\n    CAD: 1.7095394992,\n    DKK: 8.5156950429,\n    EUR: 1.1418281377,\n    GBP: 1.0,\n    JPY: 186.4645194486,\n    MXN: 21.4624577112,\n    NOK: 13.4646396158,\n    NZD: 2.079581301,\n    PLN: 5.0062181164\n};\n\nif (nodecg.bundleConfig.freecurrencyapi_key) {\n    fetch(`https://api.freecurrencyapi.com/v1/latest?apikey=${nodecg.bundleConfig.freecurrencyapi_key}&base_currency=${nodecg.bundleConfig.display_currency}`)\n        .then((r) => r.json())\n        .then((j) => {\n            conversionRates = j.data;\n            nodecg.log.info(\"Conversion rates loaded, refreshing all conversions\");\n            convertAll();\n        });\n} else convertAll();\n\nfunction convertAll() {\n    console.log(\"Converting all currencies\");\n    donations.value.forEach(convertValue);\n}\n\nexport function convertValue(dono: Donation) {\n    const disp = nodecg.bundleConfig.display_currency;\n    if (disp === undefined) return;\n    var val: Number;\n    if (dono.amount.currency == disp) {\n        val = Number(dono.amount.value)\n    } else if (dono.amount.currency in conversionRates) {\n        val = Number(dono.amount.value) / conversionRates[dono.amount.currency];\n    } else return;\n    if (!dono.displayAmount || dono.displayAmount.value !== val) {\n        dono.displayAmount = {\n            currency: disp,\n            value: val.toString()\n        }\n    }\n}","import type NodeCG from '@nodecg/types';\nimport type { Donation } from '../types/schemas';\nimport { getNodeCG } from './utils';\nimport { APPROVED, CENSORED, ModStatus, UNDECIDED } from './utils/mod';\nimport * as rep from './utils/replicants';\n\nconst nodecg = getNodeCG();\n\nfunction setAll<T>(prop: string, value: T, ack: NodeCG.Acknowledgement | undefined) {\n    for (let i = 0; i < rep.donations.value.length; i++) {\n        rep.donations.value[i][prop] = value;\n    }\n\n    if (ack && !ack.handled) {\n        ack(null, value);\n    }\n}\n\nnodecg.listenFor(\"clear-donations\", (value, ack) => {\n    setAll(\"read\", true, ack);\n});\n\nnodecg.listenFor(\"approve-all-donations\", (value, ack) => {\n    setAll(\"modStatus\", value, ack);\n});\n\n\nfunction searchAndSet<T>(id: string, prop: string, value: T, ack: NodeCG.Acknowledgement | undefined): Donation | undefined {\n    nodecg.log.info(\"Mark\", prop, id, value);\n    var elementIndex = rep.donations.value.findIndex((d: Donation) => d.id === id);\n    if (elementIndex !== -1) {\n        const elem = rep.donations.value[elementIndex];\n        if (elem[prop] != value) elem[prop] = value;\n\n        if (ack && !ack.handled) {\n            ack(null, null);\n        }\n        return rep.donations.value[elementIndex];\n    } else {\n        if (ack && !ack.handled) {\n            nodecg.log.error('Donation not found to mark as read | id:', id);\n            ack(new Error(\"Donation not found to mark as read\"), null);\n        }\n        return undefined;\n    }\n}\n\nnodecg.listenFor(\"set-donation-read\", ([dono, readVal], ack) => {\n    const d = searchAndSet(dono.id, \"read\", readVal, ack);\n    if (d && readVal && d.modStatus === UNDECIDED) d.modStatus = APPROVED;\n});\n\nnodecg.listenFor(\"set-donation-shown\", ([dono, shownVal], ack) => {\n    searchAndSet(dono.id, \"shown\", shownVal, ack);\n});\n\nnodecg.listenFor(\"set-donation-modstatus\", ([dono, statusVal], ack) => {\n    const d = searchAndSet(dono.id, \"modStatus\", statusVal, ack);\n    if (d && !d.shown && statusVal === APPROVED) nodecg.sendMessage(\"show-dono\", dono);\n    if (d && d.shown && statusVal !== APPROVED) nodecg.sendMessage(\"revoke-dono\", dono);\n});\n","\nexport type ModStatus = boolean | null;\nexport const APPROVED = true, UNDECIDED = null, CENSORED = false;\n\nexport function tripleState<T>(v: ModStatus, appVal: T, undecVal: T, cenVal: T): T {\n    // Shorthand for setting a value for each of the 3 mod states\n    return v === APPROVED ? appVal : (v === CENSORED ? cenVal : undecVal);\n}"],"names":[],"version":3,"file":"index.js.map","sourceRoot":"../"}